enum CScrollViewDirection
{
	eScrollViewDirectionHorizontal,
	eScrollViewDirectionVertical,
	eScrollViewDirectionBoth
};

class CScrollViewContainer : public CPanel
{
	virtual void reset();
};

class CScrollView : public CPanel, public CScrollableProtocol
{
	CScrollView();
	virtual ~CScrollView();

	virtual bool init();
	static CScrollView* create(const CCSize& contentSize);
	virtual bool initWithSize(const CCSize& tSize);
	void setContainerSize(CCSize tSize);
	const CCSize& getContainerSize() const;
	CScrollViewDirection getDirection();
	void setDirection(CScrollViewDirection eDirection);
	CScrollViewContainer* getContainer();
	virtual void setContentSize(const CCSize& contentSize);

	const CCPoint& getContentOffset() const;
	void setBounceable(bool bBounceable);
	bool isBounceable();
	void setDeaccelerateable(bool bDeaccelerateable);
	bool isDeaccelerateable();
	void setDragable(bool bDragable);
	bool isDragable();
    bool isTouchMoved();
    
	void stopContainerAnimation();
	const CCPoint& getMaxOffset() const;
	const CCPoint& getMinOffset() const;
	void setContentOffsetToTop();
	void setContentOffsetToTopInDuration(float fDuration);
	void setContentOffsetToTopEaseIn(float fDuration, float fRate);
	void setContentOffsetToBottom();
	void setContentOffsetToRight();
	void setContentOffsetToLeft();
	void relocateContainer();
	void setContentOffset(CCPoint tOffset);
	void setContentOffsetInDuration(CCPoint tOffset, float fDuration);
	void setContentOffsetEaseIn(CCPoint tOffset, float fDuration, float fRate);
};